<!DOCTYPE html>
<!-- saved from url=(0063)file:///C:/Users/Sangmesh/Downloads/Assistant%20Management.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>PPulse Admin</title>    
    <style>
        body {
            background-color: #f0f0f0;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        .gap1 {
            display: flex;
            flex-wrap: wrap;
            gap: 500px;
        }
        .card{
            background-color:rgb(148, 187, 236);
            border-radius: 5px;
            padding: 20px;
            margin: 20px auto;
            width: 500px;
            text-align: left;
            box-shadow: 0 0 10px rgba(143, 129, 129, 0.1);
        }
        .cardAssistantTable{
            transition: height 0.3s ease; /* Smooth height transitions */
            min-height: 150px; /* Minimum height when empty */
            overflow: auto; /* Scroll if content is too large */
            background-color:rgb(148, 185, 233);
            border-radius: 5px;
            padding: 20px;
            margin: 20px auto;
            width: 1400px;
            text-align: left;
            box-shadow: 0 0 10px rgba(143, 129, 129, 0.1);
        }
        .inputText{
            width:200px; height:25px; margin-bottom: 10px; font-size:15px;
            display: flex; flex-direction: column; margin-left: 150px;
        }
        .inputTextarea{
            width:200px; height:100px; margin-bottom: 10px;margin-top: 10px;
            display: flex; flex-direction: column; margin-left: 150px;
        }
        .btnStyle{
            text-align:center; width:100px; height:25px; background-color:rgb(160, 154, 69);margin-left:405px;
        }
        .h2Fmt{
            font-size: 30px; font-weight: bold; text-align: center;
        }
        .card table {
            width: 80%; border-collapse: collapse; margin: 20px auto;
        }
        .card th, .card td{
            padding: 10px; text-align: left; border: 1px solic #ccc;
        }
        .card th{
            background-color: #f2f2f2;
        }
        /* Container styling */
        .table-container {
            max-width: 100%;
            margin: 0 auto;
            padding: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            border-radius: 8px;
            background: white;
        }

        /* Table styling */
        .assistantTable {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            table-layout: auto; /* Allows table to expand naturally */
        }

        .assistantTable th, 
        .assistantTable td {
            border: 1px solid #ddd;
            padding: 8px 12px;
            text-align: center; 
            vertical-align: middle;
        }

        /* Input field styling */
        .editable-input {
            width: 80%;
            padding: 4px 8px;
            border: 1px solid #ccc;
            border-radius: 4px; margin: 0 auto; 
            horizontal-align: center;
            box-sizing: border-box;
        }


        /* Button styling */
        .btn-action {
            padding: 5px 10px;
            margin: 0 2px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .btn-action:hover {
            background-color: #45a049;
        }
        .btn-crud{
            background-color:rgb(45, 157, 185);margin-left:405px;";        
        }
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .table-container {
                overflow-x: scroll;
            }
            
            .assistantTable {
                min-width: 700px;
            }
        }
        .boldLabel{
            font-weight:bold;
            font-size: 18px;
            margin-bottom: 10px;
        }
    </style>
<!-- Code injected by Five-server -->
  <script async="" data-id="five-server" data-file="c:\Donegal\PPulse\ppulse-agent\templates\assistant.html" type="application/javascript" src="./Assistant Management_files/fiveserver.js.download"></script>
  <style>      
      /* Injected by five-server */
      /*[data-highlight="true"] {
        border: 1px rgb(90,170,255) solid !important;
        background-color: rgba(155,215,255,0.5);
        animation: fadeOutHighlight 1s forwards 0.5s;
      }
      img[data-highlight="true"] {
        filter: sepia(100%) hue-rotate(180deg) saturate(200%);
        animation: fadeOutHighlightIMG 0.5s forwards 0.5s;
      }*/
      @keyframes fadeOutHighlight {
        from {background-color: rgba(155,215,255,0.5);}
        to {background-color: rgba(155,215,255,0);}
      }      
      @keyframes fadeOutHighlightIMG {
        0% {filter: sepia(100%) hue-rotate(180deg) saturate(200%);}
        33% {filter: sepia(66%) hue-rotate(180deg) saturate(100%);}
        50% {filter: sepia(50%) hue-rotate(90deg) saturate(50%);}
        66% {filter: sepia(33%) hue-rotate(0deg) saturate(100%);}
        100% {filter: sepia(0%) hue-rotate(0deg) saturate(100%);}
      }
      @keyframes fiveserverInfoPopup {
        0%   {top:-40px;}
        15%  {top:4px;}
        85%  {top:4px;}
        100% {top:-40px;}
      }
      /*smaller*/
      @media (max-width: 640px) {
        #fiveserver-info-wrapper {
          max-width: 98%;
        }
        #fiveserver-info {
          border-radius: 0px;
        }      
      }

      </style></head>
<body>
    <h2 class="h2Fmt">Assistant Management</h2>
    <div class="card">    
        <label class="boldLabel"> Create an Assistant  </label><br><br>
        <label> Assistant Name  </label><input type="text" id="assistantIdCreate" class="inputText">     
        <br><div id="creates" style="color: green; margin-top: 10px;"> </div>
        <button class="btnStyle btn-crud" onclick="createAssistant()"> Create </button>
    </div>
    <div class="gap1">
    </div>
    <div class="card">
        <label class="boldLabel"> Update an Assistant  </label><br><br>

        <label> Assistant Id  </label><input class="inputText" id="assistantIdUpdate"> 
        <label> Assistant Name </label><input class="inputText" id="assistantNameUpdate">
        <label> SQL Query </label> <textarea class="inputTextarea" id="assistantSqlUpdate" cols="30" rows="10"></textarea>
        <br>
        <div id="updates" style="color: green; margin-top: 10px;"> </div>
        <div id="navigation-buttons">
            <button id="fetchButton" onclick="fetchRecords()" class="btnStyle" style="background-color: #45a049;margin-left:00px;">Fetch</button>
            <button id="prevButton" onclick="showPrev()" class="btnStyle" style="background-color:rgb(149, 69, 160); margin-left:10px;">Prev</button>
            <button id="nextButton" onclick="showNext()" class="btnStyle" style="background-color:rgb(126, 59, 104); margin-left:20px;">Next</button>
            <button class="btnStyle btn-crud" onclick="updateAssistant()"> Update </button>
        </div>
        
    </div>
    <div class="gap1">
    </div>
    <div class="card">
        <label class="boldLabel"> Delete an Assistant  </label><br><br>
        <input type="text" class="inputText" id="assistantIdDelete">     
        <br>
        <div id="deletes" style="color: green; margin-top: 10px;"> </div>
        <button class="btnStyle btn-crud" onclick="deleteAssistant()"> Delete </button>
    </div>
    <div class="card">
        <label class="boldLabel"> Search an Assistant  </label><br><br>
        <input type="text" class="inputText" id="assistantSearch">     
        <br>
        <div id="searches" style="color: green; margin-top: 10px;"> </div>
        <button class="btnStyle btn-crud" onclick="searchAssistant()"> Search </button>
    </div>
    <div class="gap1">
    </div>
    <div class="cardAssistantTable" id="cardAssistantTable" style="width: 500px; height: 200px;">
        <label class="boldLabel"> List all Assistants  </label><br><br>    
        <button class="btnStyle btn-crud" onclick="retrieveAssistant()"> List </button>
        <div id="result"></div>
        <!-- textarea class="inputTextarea"></textarea -->
    </div>

    <script>
        apiBaseUrl = "http://127.0.0.1:8000"

        // Function to create a new assistant        
        async function createAssistant(){
            try{                
                const asst_name = document.getElementById("assistantIdCreate").value.trim();
                
                if (!asst_name) {
                    alert("Please fill the Assistant name");
                    return;
                }
                
                const response = await fetch(`${apiBaseUrl}/createAssistant`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({asst_name})  // Only sending the name now
                });
                
                if (!response.ok) throw new Error("Failed to create assistant");
                
                const result = await response.json();
                //alert("Assistant Created");
                document.getElementById("creates").innerHTML = "Assistant created successfully";
                console.log(result);
                
            } catch (error) {
                console.error(error.message);
                alert("Error creating assistant: " + error.message);
            }            
        }


        // Function to retrieve all assistants        
        let assistants = [];
        let curIndex = 0;

        async function fetchRecords() {
            try {
                
                const response = await fetch(`${apiBaseUrl}/api/getAssistants`);
                if (!response.ok) throw new Error("Failed to fetch");

                const result = await response.json();
                assistants = result.assistants;

                if (assistants.length > 0) {
                    curIndex = 0;
                    displayRecord(curIndex);
                } else {
                    alert("No assistants found");
                }
            } catch (error) {
                console.error("Error:", error);
                alert("Error fetching records");
            }
        }

        // Function to display a record
        function displayRecord(index) {
            const record = assistants[index];
            if (!record) return;

            // Update all relevant fields
            document.getElementById("assistantIdUpdate").value = record.AssistantId ;
            document.getElementById("assistantNameUpdate").value = record.Name || "";
            document.getElementById("assistantSqlUpdate").value = record.LogDataSql || "";

            // Disable/enable navigation buttons appropriately
            document.getElementById("prevButton").disabled = index === 0;
            document.getElementById("nextButton").disabled = index === assistants.length - 1;
        }

        // Function to display the previous record
        function showPrev() {
            if (curIndex > 0) {
                document.getElementById("updates").innerHTML = "";
                curIndex--;
                displayRecord(curIndex);
            }
        }

        // Function to display the next record
        function showNext() {
            if (curIndex < assistants.length - 1) {
                document.getElementById("updates").innerHTML = "";
                curIndex++;
                displayRecord(curIndex);
            }
        }       

        // Function to retrieve all assistants
        
        let hasResized = false;
        // Function to retrieve all assistants
        async function retrieveAssistant() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/getAssistants`);
                if (!response.ok) throw new Error("Failed to fetch");
                
                const card = document.getElementById('cardAssistantTable');
                const result = await response.json();
                const assistants = result.assistants;

                let tableHtml = "<table class='assistantTable'><thead><tr>";
                const editableFields = ["Name", "SystemPromptText", "LogDataSql"];

                if (assistants.length > 0) {
                    // Generate headers
                    Object.keys(assistants[0]).forEach(key => {
                        tableHtml += `<th>${key}</th>`;
                    });
                    tableHtml += `<th>Actions</th></tr></thead><tbody>`;

                    // Generate rows
                    assistants.forEach((asst) => {
                        tableHtml += `<tr id="row-${asst.AssistantId}">`;
                        
                        Object.entries(asst).forEach(([key, value]) => {
                            if (key === "SystemPromptText" || key === "LogDataSql") {
                                tableHtml += `
                                    <td><textarea id="${key}-${asst.AssistantId}" 
                                        class="editable-input inputTextarea"
                                        style="width:200px; height:60px;">${value}</textarea></td>`;
                            } 
                            else if (key === "Name") {
                                tableHtml += `
                                    <td><input type="text" id="${key}-${asst.AssistantId}" 
                                        value="${value}" class="editable-input inputText"
                                        style="width:200px; height:25px;"/></td>`;
                            }
                            else {
                                tableHtml += `<td>${value}</td>`;
                            }
                        });

                        // Add Update/Delete buttons
                        tableHtml += `
                            <td style="white-space: nowrap;">
                                <button onclick="updateRow('${asst.AssistantId}')" class="btn-action">Update</button>
                                <button onclick="deleteRow('${asst.AssistantId}')" class="btn-action">Delete</button>
                            </td>
                        </tr>`;
                    });

                    tableHtml += "</tbody></table>";
                } else {
                    tableHtml += "<tr><td colspan='100%'>No assistants found</td></tr></table>";
                }

                // Insert the table into the result div
                const resultDiv = document.getElementById("result");
                resultDiv.innerHTML = tableHtml;
                
                // Calculate and set card height based on table size
                const table = resultDiv.querySelector('table');
                if (table) {
                    const tableHeight = table.offsetHeight;
                    const padding = 40;
                    card.style.height = `${tableHeight + padding}px`;
                    card.style.width = "900px"; // Fixed width as per your CSS
                }

            } catch (err) {
                alert("Error: " + err.message);
            }
        }

        // Function to update a row from the table
        async function updateRow(assistantId) {
            try {
                // Get values from the row inputs
                const name = document.getElementById(`Name-${assistantId}`).value;
                const systemPrompt = document.getElementById(`SystemPromptText-${assistantId}`).value;
                const sqlQuery = document.getElementById(`LogDataSql-${assistantId}`).value;

                const updatedData = {
                    asst_id: assistantId,
                    asst_name: name,
                    system_prompt: systemPrompt,
                    sqlUpdate: sqlQuery
                };

                const response = await fetch(`${apiBaseUrl}/api/updateAssistant/${assistantId}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(updatedData)
                });

                if (response.ok) {
                    alert("Assistant updated successfully");
                    retrieveAssistant(); // Refresh the table
                } else {
                    throw new Error("Failed to update assistant");
                }
            } catch (error) {
                console.error("Update error:", error);
                alert("Error updating assistant: " + error.message);
            }
        }
        // Function to delete a row from the table
        async function deleteRow(assistantId) {
            try {
                if (!confirm("Are you sure you want to delete this assistant?")) {
                    return;
                }

                const response = await fetch(`${apiBaseUrl}/api/deleteAssistant/${assistantId}`, {
                    method: "DELETE"
                });

                if (response.ok) {
                    alert("Assistant deleted successfully");
                    retrieveAssistant(); // Refresh the table
                } else {
                    throw new Error("Failed to delete assistant");
                }
            } catch (error) {
                console.error("Delete error:", error);
                alert("Error deleting assistant: " + error.message);
            }
        }

        // Function to update assistant details
        async function updateAssistant(AssistantId) {           
            
            const updatedData = {};            
            try{
            const updatedData = {
                asst_id :document.getElementById("assistantIdUpdate").value.trim(),
                asst_name : document.getElementById("assistantNameUpdate").value.trim(),
                sqlUpdate : document.getElementById("assistantSqlUpdate").value.trim()
            };            
    
            // Send the updated data to the server            
            const id = updatedData.asst_id;
            const response = await fetch(`${apiBaseUrl}/api/updateAssistant/${id}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(updatedData)
            });
            
            if (response.ok) {
                //alert("Assistant updated successfully");
                document.getElementById("updates").innerHTML = "Assistant updated successfully";
                assistants[curIndex].Name = updatedData.asst_name;
                assistants[curIndex].LogDataSql = updatedData.sqlUpdate;
                retrieveAssistant(); // Refresh the table
            } else {
                alert("Failed to update assistant");
            }
        }catch (err) {
            alert("Error: " + err.message);
        }
    }
        
        async function deleteAssistant() {
            const id = document.getElementById("assistantIdDelete").value.trim();
            
            const confirmed = confirm("Are you sure you want to delete this assistant?");
            if (!confirmed) return;
            
            const response = await fetch(`${apiBaseUrl}/api/deleteAssistant/${id}`, {
                method: "DELETE"
            });

            if (response.ok) {
                //alert("Assistant deleted successfully");
                document.getElementById("deletes").innerHTML = "Assistant deleted successfully";
                retrieveAssistant(); // Refresh the table
            } else {
                alert("Failed to delete assistant");
            }
        }
        
        // Function to search assistants
        async function searchAssistant() {
            try {
                const searchName = document.getElementById("assistantSearch").value.trim();
                
                if (!searchName) {
                    alert("Please enter an assistant name to search");
                    return;
                }

                const response = await fetch(`${apiBaseUrl}/api/searchAssistant/${encodeURIComponent(searchName)}`);
                
                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.detail || "Failed to search assistant");
                }

                const data = await response.json();
                displaySearchResults(data.assistants);

            } catch (error) {
                console.error("Search error:", error);
                document.getElementById("searches").innerHTML = `
                    <div style="color: red;">Error: ${error.message}</div>
                `;
            }
        }

        // Function to display search results
        function displaySearchResults(assistants) {
            const resultDiv = document.getElementById("result");
            
            if (assistants.length === 0) {
                resultDiv.innerHTML = "<p>No assistants found</p>";
                return;
            }

            let tableHtml = `
                <table class='assistantTable'>
                    <thead>
                        <tr>
                            <th>AssistantId</th>
                            <th>Name</th>
                            <th>SystemPromptText</th>
                            <th>LogDataSql</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            assistants.forEach(asst => {
                tableHtml += `
                    <tr id="row-${asst.AssistantId}">
                        <td>${asst.AssistantId}</td>
                        <td>
                            <input type="text" 
                                id="Name-${asst.AssistantId}" 
                                value="${asst.Name || ''}" 
                                class="editable-input inputText"
                                style="width:200px; height:25px;">
                        </td>
                        <td>
                            <textarea 
                                id="SystemPromptText-${asst.AssistantId}" 
                                class="editable-input inputTextarea"
                                style="width:200px; height:60px;">${asst.SystemPromptText || ''}</textarea>
                        </td>
                        <td>
                            <textarea 
                                id="LogDataSql-${asst.AssistantId}" 
                                class="editable-input inputTextarea"
                                style="width:200px; height:60px;">${asst.LogDataSql || ''}</textarea>
                        </td>
                        <td style="white-space: nowrap;">
                            <button onclick="updateRow('${asst.AssistantId}')" class="btn-action">Update</button>
                            <button onclick="deleteRow('${asst.AssistantId}')" class="btn-action">Delete</button>
                        </td>
                    </tr>
                `;
            });

            tableHtml += `</tbody></table>`;
            resultDiv.innerHTML = tableHtml;
            
            // Adjust card size to fit results
            const card = document.getElementById('cardAssistantTable');
            const table = resultDiv.querySelector('table');
            if (table) {
                card.style.height = `${table.offsetHeight + 100}px`;
            }
            
            // Show success message
            document.getElementById("searches").innerHTML = `
                <div style="color: green;">
                    Found ${assistants.length} assistant(s)
                </div>
            `;
        }
    </script>

</body></html>